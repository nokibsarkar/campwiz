basePath: /api/v2
definitions:
  consts.Language:
    enum:
    - am
    - ar
    - as
    - af
    - bn
    - zh
    - da
    - nl
    - en
    - fi
    - fr
    - de
    - el
    - gu
    - ha
    - hi
    - ig
    - it
    - ja
    - kn
    - ko
    - ml
    - mr
    - ne
    - "no"
    - or
    - om
    - fa
    - pt
    - pa
    - ru
    - sa
    - st
    - sn
    - sd
    - so
    - es
    - sw
    - sv
    - ta
    - te
    - ts
    - tn
    - tr
    - ur
    - '-'
    - ve
    - xh
    - yo
    - zu
    type: string
    x-enum-varnames:
    - Amharic
    - Arabic
    - Assamese
    - Afrikaans
    - Bangla
    - Chinese
    - Danish
    - Dutch
    - English
    - Finnish
    - French
    - German
    - Greek
    - Gujarati
    - Hausa
    - Hindi
    - Igbo
    - Italian
    - Japanese
    - Kannada
    - Korean
    - Malayalam
    - Marathi
    - Nepali
    - Norwegian
    - Odia
    - Oromo
    - Persian
    - Portuguese
    - Punjabi
    - Russian
    - Sanskrit
    - Sesotho
    - Shona
    - Sindhi
    - Somali
    - Spanish
    - Swahili
    - Swedish
    - Tamil
    - Telugu
    - Tsonga
    - Tswana
    - Turkish
    - Urdu
    - Undefined
    - Venda
    - Xhosa
    - Yoruba
    - Zulu
  database.Campaign:
    properties:
      campaignId:
        type: string
      createdAt:
        description: read only
        type: string
      createdById:
        type: string
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      language:
        $ref: '#/definitions/consts.Language'
      name:
        type: string
      rules:
        type: string
      startDate:
        type: string
    type: object
  database.MediaType:
    enum:
    - ARTICLE
    - BITMAP
    - AUDIO
    - VIDEO
    - PDF
    type: string
    x-enum-varnames:
    - MediaTypeArticle
    - MediaTypeImage
    - MediaTypeAudio
    - MediaTypeVideo
    - MediaTypePDF
  database.Round:
    properties:
      allowCreations:
        type: boolean
      allowExpansions:
        type: boolean
      allowJuryToParticipate:
        type: boolean
      allowMultipleJudgement:
        type: boolean
      allowedMediaTypes:
        items:
          $ref: '#/definitions/database.MediaType'
        type: array
      blacklist:
        type: string
      campaignId:
        type: string
      createdAt:
        type: string
      createdById:
        type: string
      dependsOnRoundId:
        type: string
      description:
        type: string
      endDate:
        type: string
      isOpen:
        type: boolean
      isPublic:
        type: boolean
      maximumSubmissionOfSameArticle:
        type: integer
      minimumAddedBytes:
        type: integer
      minimumAddedWords:
        type: integer
      minimumDurationMilliseconds:
        type: integer
      minimumHeight:
        type: integer
      minimumResolution:
        type: integer
      minimumTotalBytes:
        type: integer
      minimumTotalWords:
        type: integer
      minimumWidth:
        type: integer
      name:
        type: string
      roundId:
        type: string
      secretBallot:
        type: boolean
      serial:
        type: integer
      startDate:
        type: string
      status:
        $ref: '#/definitions/database.RoundStatus'
      totalSubmissions:
        type: integer
    type: object
  database.RoundStatus:
    enum:
    - PENDING
    - IMPORTING
    - DISTRIBUTING
    - EVALUATING
    - REJECTED
    - CANCELLED
    - PAUSED
    - SCHEDULED
    - ACTIVE
    - COMPLETED
    type: string
    x-enum-varnames:
    - RoundStatusPending
    - RoundStatusImporting
    - RoundStatusDistributing
    - RoundStatusEvaluating
    - RoundStatusRejected
    - RoundStatusCancelled
    - RoundStatusPaused
    - RoundStatusScheduled
    - RoundStatusActive
    - RoundStatusCompleted
  database.Submission:
    properties:
      author:
        description: The Actual Author in the Wikimedia
        type: string
      bitrate:
        description: in kbps
        type: integer
      campaignId:
        type: string
      createdAtServer:
        description: Campaign          *Campaign  `json:"-" gorm:"foreignKey:CampaignID"`
        type: string
      creditHTML:
        type: string
      currentRoundId:
        type: string
      description:
        type: string
      duration:
        description: in milliseconds
        type: integer
      height:
        type: integer
      license:
        type: string
      mediatype:
        $ref: '#/definitions/database.MediaType'
      metadata:
        items:
          type: integer
        type: array
      pageid:
        type: string
      participantId:
        type: string
      size:
        description: in bytes
        type: integer
      submittedAt:
        type: string
      submittedById:
        description: The User who submitted the article on behalf of the participant
        type: string
      thumbheight:
        type: integer
      thumburl:
        type: string
      thumbwidth:
        type: integer
      title:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  database.Task:
    properties:
      campaignId:
        type: string
      createdAt:
        type: string
      createdById:
        type: string
      data:
        items:
          type: integer
        type: array
      failedCount:
        type: integer
      failedIds:
        type: object
      remainingCount:
        type: integer
      roundId:
        type: string
      status:
        $ref: '#/definitions/database.TaskStatus'
      successCount:
        type: integer
      taskId:
        type: string
      type:
        $ref: '#/definitions/database.TaskType'
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  database.TaskStatus:
    enum:
    - pending
    - running
    - success
    - failed
    type: string
    x-enum-varnames:
    - TaskStatusPending
    - TaskStatusRunning
    - TaskStatusSuccess
    - TaskStatusFailed
  database.TaskType:
    enum:
    - import.commons
    - distribute.evaluations
    type: string
    x-enum-varnames:
    - TaskTypeImportFromCommons
    - TaskTypeDistributeEvaluations
  routes.ResponseList-database_Campaign:
    properties:
      continueToken:
        type: string
      data:
        items:
          $ref: '#/definitions/database.Campaign'
        type: array
      previousToken:
        type: string
    type: object
  routes.ResponseList-database_Round:
    properties:
      continueToken:
        type: string
      data:
        items:
          $ref: '#/definitions/database.Round'
        type: array
      previousToken:
        type: string
    type: object
  routes.ResponseList-database_Submission:
    properties:
      continueToken:
        type: string
      data:
        items:
          $ref: '#/definitions/database.Submission'
        type: array
      previousToken:
        type: string
    type: object
  routes.ResponseSingle-database_Round:
    properties:
      data:
        $ref: '#/definitions/database.Round'
    type: object
  routes.ResponseSingle-database_Task:
    properties:
      data:
        $ref: '#/definitions/database.Task'
    type: object
  routes.ResponseSingle-services_TaskResponse:
    properties:
      data:
        $ref: '#/definitions/services.TaskResponse'
    type: object
  services.CampaignCreateRequest:
    properties:
      allowCreations:
        type: boolean
      allowExpansions:
        type: boolean
      allowJuryToParticipate:
        type: boolean
      allowMultipleJudgement:
        type: boolean
      allowedMediaTypes:
        items:
          $ref: '#/definitions/database.MediaType'
        type: array
      blacklist:
        type: string
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      jury:
        items:
          type: string
        type: array
      language:
        $ref: '#/definitions/consts.Language'
      maximumSubmissionOfSameArticle:
        type: integer
      minimumAddedBytes:
        type: integer
      minimumAddedWords:
        type: integer
      minimumDurationMilliseconds:
        type: integer
      minimumHeight:
        type: integer
      minimumResolution:
        type: integer
      minimumTotalBytes:
        type: integer
      minimumTotalWords:
        type: integer
      minimumWidth:
        type: integer
      name:
        type: string
      rules:
        type: string
      secretBallot:
        type: boolean
      startDate:
        type: string
    type: object
  services.CampaignUpdateRequest:
    properties:
      allowCreations:
        type: boolean
      allowExpansions:
        type: boolean
      allowJuryToParticipate:
        type: boolean
      allowMultipleJudgement:
        type: boolean
      allowedMediaTypes:
        items:
          $ref: '#/definitions/database.MediaType'
        type: array
      blacklist:
        type: string
      description:
        type: string
      endDate:
        type: string
      image:
        type: string
      jury:
        items:
          type: string
        type: array
      language:
        $ref: '#/definitions/consts.Language'
      maximumSubmissionOfSameArticle:
        type: integer
      minimumAddedBytes:
        type: integer
      minimumAddedWords:
        type: integer
      minimumDurationMilliseconds:
        type: integer
      minimumHeight:
        type: integer
      minimumResolution:
        type: integer
      minimumTotalBytes:
        type: integer
      minimumTotalWords:
        type: integer
      minimumWidth:
        type: integer
      name:
        type: string
      rules:
        type: string
      secretBallot:
        type: boolean
      startDate:
        type: string
    type: object
  services.ImportFromCommonsPayload:
    properties:
      categories:
        description: Categories from which images will be fetched
        items:
          type: string
        type: array
    type: object
  services.RoundRequest:
    properties:
      allowCreations:
        type: boolean
      allowExpansions:
        type: boolean
      allowJuryToParticipate:
        type: boolean
      allowMultipleJudgement:
        type: boolean
      allowedMediaTypes:
        items:
          $ref: '#/definitions/database.MediaType'
        type: array
      blacklist:
        type: string
      campaignId:
        type: string
      dependsOnRoundId:
        type: string
      description:
        type: string
      endDate:
        type: string
      isOpen:
        type: boolean
      isPublic:
        type: boolean
      maximumSubmissionOfSameArticle:
        type: integer
      minimumAddedBytes:
        type: integer
      minimumAddedWords:
        type: integer
      minimumDurationMilliseconds:
        type: integer
      minimumHeight:
        type: integer
      minimumResolution:
        type: integer
      minimumTotalBytes:
        type: integer
      minimumTotalWords:
        type: integer
      minimumWidth:
        type: integer
      name:
        type: string
      secretBallot:
        type: boolean
      serial:
        type: integer
      startDate:
        type: string
    type: object
  services.TaskResponse:
    properties:
      campaignId:
        type: string
      createdAt:
        type: string
      createdById:
        type: string
      data:
        items:
          type: integer
        type: array
      failedCount:
        type: integer
      failedIds:
        type: object
      remainingCount:
        type: integer
      roundId:
        type: string
      status:
        $ref: '#/definitions/database.TaskStatus'
      successCount:
        type: integer
      taskId:
        type: string
      type:
        $ref: '#/definitions/database.TaskType'
      updatedAt:
        type: string
      userId:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: nokibsarkar@gmail.com
    name: Nokib Sarkar
    url: https://github.com/nokibsarkar
  description: This is the API documentation for Campwiz
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  title: Campwiz API
  version: "1"
paths:
  /campaign/:
    get:
      description: get all campaigns
      parameters:
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: ids
        type: array
      - in: query
        name: limit
        type: integer
      - in: query
        name: nextToken
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseList-database_Campaign'
      summary: List all campaigns
      tags:
      - Campaign
    post:
      description: Create a new campaign
      parameters:
      - description: The campaign request
        in: body
        name: campaignRequest
        required: true
        schema:
          $ref: '#/definitions/services.CampaignCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Campaign'
      summary: Create a new campaign
      tags:
      - Campaign
  /campaign/{id}:
    post:
      description: Update a campaign
      parameters:
      - description: The campaign ID
        in: path
        name: id
        required: true
        type: string
      - description: The campaign request
        in: body
        name: campaignRequest
        required: true
        schema:
          $ref: '#/definitions/services.CampaignUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Campaign'
      summary: Update a campaign
      tags:
      - Campaign
  /round/:
    get:
      description: get all rounds
      parameters:
      - in: query
        name: campaignId
        type: string
      - in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseList-database_Round'
      summary: List all rounds
      tags:
      - Round
    post:
      description: Create a new round for a campaign
      parameters:
      - description: The round request
        in: body
        name: roundRequest
        required: true
        schema:
          $ref: '#/definitions/services.RoundRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseSingle-database_Round'
      summary: Create a new round
      tags:
      - Round
  /round/{roundId}:
    post:
      description: Update the details of a round
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The round request
        in: body
        name: roundRequest
        required: true
        schema:
          $ref: '#/definitions/services.RoundRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseSingle-database_Round'
      summary: Update the details of a round
      tags:
      - Round
  /round/import/{roundId}/commons:
    post:
      description: The user would provide a round ID and a list of commons categories
        and the system would import images from those categories
      parameters:
      - description: The round ID
        in: path
        name: roundId
        required: true
        type: string
      - description: The import from commons request
        in: body
        name: ImportFromCommons
        required: true
        schema:
          $ref: '#/definitions/services.ImportFromCommonsPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseSingle-database_Task'
      summary: Import images from commons
      tags:
      - Round
  /submission/:
    get:
      description: get all submissions
      parameters:
      - in: query
        name: campaignId
        type: string
      - in: query
        name: continueToken
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: participantId
        type: string
      - in: query
        name: roundId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseList-database_Submission'
      summary: List all submissions
      tags:
      - Submission
  /task/{taskId}:
    get:
      description: The task represents a background job that can be run by the system
      parameters:
      - description: The task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseSingle-services_TaskResponse'
      summary: Get a task by ID
      tags:
      - Task
  /task/{taskId}/stream:
    get:
      description: The task represents a background job that can be run by the system.
        This endpoint streams the response
      parameters:
      - description: The task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a task by ID but stream the response
      tags:
      - Task
produces:
- application/json
schemes:
- http
- https
swagger: "2.0"
