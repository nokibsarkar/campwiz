// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Nokib Sarkar",
            "url": "https://github.com/nokibsarkar",
            "email": "nokibsarkar@gmail.com"
        },
        "license": {
            "name": "GPL-3.0",
            "url": "https://www.gnu.org/licenses/gpl-3.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/batch/": {
            "get": {
                "description": "List batches",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "List batches",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseList-database_Batch"
                        }
                    }
                }
            }
        },
        "/batch/create/commons": {
            "post": {
                "description": "The user would provide a list of commons categories and the system would create a batch from the images in those categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create a batch of images from commons category",
                "parameters": [
                    {
                        "description": "The batch creation request",
                        "name": "CreateFromCommons",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CreateFromCommons"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseSingle-services_BatchCreationResult"
                        }
                    }
                }
            }
        },
        "/batch/create/csv": {
            "post": {
                "description": "The user would provide a CSV file with a list of image names and the system would create a batch from the images in those URLs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create a batch of images from a CSV file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "The CSV file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseSingle-services_BatchCreationResult"
                        }
                    }
                }
            }
        },
        "/batch/create/pagepile/{pagepileId}": {
            "post": {
                "description": "The user would provide a pagepile ID and the system would create a batch from the images in that pagepile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create a batch of images from a pagepile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The pagepile ID",
                        "name": "pagepileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseSingle-services_BatchCreationResult"
                        }
                    }
                }
            }
        },
        "/batch/create/round/{roundId}": {
            "post": {
                "description": "The user would provide a round ID and the system would create a batch from the images in that round",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create a batch of images from another round output",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The round ID",
                        "name": "roundId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseSingle-services_BatchCreationResult"
                        }
                    }
                }
            }
        },
        "/batch/create/wikipage": {
            "post": {
                "description": "The user would provide a wikipage and the system would create a batch from the images listed in that wikipage",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create a batch of images from a list of wikipages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The wikipage",
                        "name": "wikipage",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The language of the wikipage",
                        "name": "language",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseSingle-services_BatchCreationResult"
                        }
                    }
                }
            }
        },
        "/batch/{batchId}": {
            "get": {
                "description": "Get a batch",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Get a batch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The batch ID",
                        "name": "batchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseSingle-database_Batch"
                        }
                    }
                }
            }
        },
        "/batch/{batchId}/images": {
            "get": {
                "description": "Get images of a batch",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Get images of a batch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The batch ID",
                        "name": "batchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseList-database_Image"
                        }
                    }
                }
            }
        },
        "/campaign/": {
            "get": {
                "description": "get all campaigns",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "List all campaigns",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "nextToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseList-database_Campaign"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Create a new campaign",
                "parameters": [
                    {
                        "description": "The campaign request",
                        "name": "campaignRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CampaignCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Campaign"
                        }
                    }
                }
            }
        },
        "/campaign/{id}": {
            "post": {
                "description": "Update a campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Update a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The campaign ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The campaign request",
                        "name": "campaignRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CampaignUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/database.Campaign"
                        }
                    }
                }
            }
        },
        "/round/": {
            "get": {
                "description": "get all rounds",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CampaignRound"
                ],
                "summary": "List all rounds",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaignId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseList-database_CampaignRound"
                        }
                    }
                }
            }
        },
        "/round/bulk-add": {
            "post": {
                "description": "Add multiple rounds to a campaign",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CampaignRound"
                ],
                "summary": "Add multiple rounds to a campaign",
                "parameters": [
                    {
                        "description": "The round request",
                        "name": "roundRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.RoundRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.ResponseList-database_CampaignRound"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "consts.Language": {
            "type": "string",
            "enum": [
                "am",
                "ar",
                "as",
                "af",
                "bn",
                "zh",
                "da",
                "nl",
                "en",
                "fi",
                "fr",
                "de",
                "el",
                "gu",
                "ha",
                "hi",
                "ig",
                "it",
                "ja",
                "kn",
                "ko",
                "ml",
                "mr",
                "ne",
                "no",
                "or",
                "om",
                "fa",
                "pt",
                "pa",
                "ru",
                "sa",
                "st",
                "sn",
                "sd",
                "so",
                "es",
                "sw",
                "sv",
                "ta",
                "te",
                "ts",
                "tn",
                "tr",
                "ur",
                "-",
                "ve",
                "xh",
                "yo",
                "zu"
            ],
            "x-enum-varnames": [
                "Amharic",
                "Arabic",
                "Assamese",
                "Afrikaans",
                "Bangla",
                "Chinese",
                "Danish",
                "Dutch",
                "English",
                "Finnish",
                "French",
                "German",
                "Greek",
                "Gujarati",
                "Hausa",
                "Hindi",
                "Igbo",
                "Italian",
                "Japanese",
                "Kannada",
                "Korean",
                "Malayalam",
                "Marathi",
                "Nepali",
                "Norwegian",
                "Odia",
                "Oromo",
                "Persian",
                "Portuguese",
                "Punjabi",
                "Russian",
                "Sanskrit",
                "Sesotho",
                "Shona",
                "Sindhi",
                "Somali",
                "Spanish",
                "Swahili",
                "Swedish",
                "Tamil",
                "Telugu",
                "Tsonga",
                "Tswana",
                "Turkish",
                "Urdu",
                "Undefined",
                "Venda",
                "Xhosa",
                "Yoruba",
                "Zulu"
            ]
        },
        "database.Batch": {
            "type": "object",
            "properties": {
                "batchId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "totalSubmissions": {
                    "type": "integer"
                }
            }
        },
        "database.Campaign": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "read only",
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "name": {
                    "type": "string"
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "database.CampaignRound": {
            "type": "object",
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "dependsOnRoundId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isOpen": {
                    "type": "boolean"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "maximumSubmissionOfSameImage": {
                    "type": "integer"
                },
                "minimumTotalImageSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "serial": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "database.CampaignRoundWritable": {
            "type": "object",
            "properties": {
                "dependsOnRoundId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "isOpen": {
                    "type": "boolean"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "maximumSubmissionOfSameImage": {
                    "type": "integer"
                },
                "minimumTotalImageSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "serial": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "database.Image": {
            "type": "object",
            "properties": {
                "pageid": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "routes.ResponseList-database_Batch": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Batch"
                    }
                }
            }
        },
        "routes.ResponseList-database_Campaign": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Campaign"
                    }
                }
            }
        },
        "routes.ResponseList-database_CampaignRound": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.CampaignRound"
                    }
                }
            }
        },
        "routes.ResponseList-database_Image": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Image"
                    }
                }
            }
        },
        "routes.ResponseSingle-database_Batch": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/database.Batch"
                }
            }
        },
        "routes.ResponseSingle-services_BatchCreationResult": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/services.BatchCreationResult"
                }
            }
        },
        "services.BatchCreationResult": {
            "type": "object",
            "properties": {
                "batchId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdById": {
                    "type": "string"
                },
                "failedCount": {
                    "type": "integer"
                },
                "failedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "successCount": {
                    "type": "integer"
                },
                "totalSubmissions": {
                    "type": "integer"
                }
            }
        },
        "services.CampaignCreateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "jury": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "name": {
                    "type": "string"
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "services.CampaignUpdateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "jury": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "language": {
                    "$ref": "#/definitions/consts.Language"
                },
                "name": {
                    "type": "string"
                },
                "rules": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            }
        },
        "services.CreateFromCommons": {
            "type": "object",
            "properties": {
                "categories": {
                    "description": "Categories from which images will be fetched",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roundId": {
                    "description": "Round ID to which the batch belongs",
                    "type": "string"
                }
            }
        },
        "services.RoundRequest": {
            "type": "object",
            "properties": {
                "campaignId": {
                    "type": "string"
                },
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.CampaignRoundWritable"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1",
	Host:             "localhost:8080",
	BasePath:         "/api/v2",
	Schemes:          []string{"http", "https"},
	Title:            "Campwiz API",
	Description:      "This is the API documentation for Campwiz",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
